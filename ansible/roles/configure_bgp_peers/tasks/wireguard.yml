---
- name: Create Wireguard Directory
  file:
    state: directory
    path: "{{ wireguard_conf_dir }}"

- name: Gather Service State
  service_facts:
  register: services_state

- name: Enumerate Unknown Wireguard Services
  set_fact:
    unknown_wg_services: "{{ 
        ansible_facts.services.keys() 
      | select('match', '^wg-quick@dn42.*$') 
      | difference(peerings.keys() | map('format', 'wg-quick@' + wireguard_peer_prefix + '{}.service'))
    }}"

- name: Stop Unknown Wireguard Services
  service:
    name: "{{ item }}"
    state: stopped
  with_items: "{{ unknown_wg_services }}"

- name: Disable Unknown Wireguard Services
  service:
    name: "{{ item }}"
    enabled: no
  with_items: "{{ unknown_wg_services }}"

- name: Reset Failure Status for Removed Services
  shell: "systemctl reset-failed {{ item }}"
  with_items: "{{ unknown_wg_services }}"

- name: Enumerate Wireguard Configs
  find:
    paths: "{{ wireguard_conf_dir }}"
  register: wireguard_configs

- name: Remove Unknown Wireguard Configs
  file:
    path: "{{ item }}"
    state: absent
  with_items: "{{ 
      wireguard_configs.files 
    | map(attribute='path') 
    | select('match', '.*' + wireguard_peer_prefix + '.*')
    | difference(peerings.keys() | map('format', wireguard_conf_dir + '/' + wireguard_peer_prefix + '{}.conf')) 
  }}"

- name: Generate Wireguard Configs
  template:
    src: wg_tunnel.conf.j2
    dest: "{{ wireguard_conf_dir }}/{{ wireguard_peer_prefix }}{{ item.key }}.conf"
  with_dict: "{{ peerings }}"
  when: "'wireguard_tunnel' in item.value.keys()"
  register: generated_wireguard_configs

- name: Reload Wireguard
  service:
    name: "wg-quick@{{ wireguard_peer_prefix }}{{ item.item.key }}"
    state: reloaded
    enabled: yes
  with_items: "{{ generated_wireguard_configs.results }}"
  when: item.changed
